name: ðŸ“¦ Auto Patch Release & Build

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  patch-build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x' 

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$LATEST" >> $GITHUB_OUTPUT

      - name: Generate next patch version
        id: taggen
        run: |
          BASE=${{ steps.latest_tag.outputs.latest_tag }}
          if [[ "$BASE" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            NEW_TAG="v${major}.${minor}.$((patch + 1))"
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          else
            echo "Invalid tag format: $BASE"
            exit 1
          fi

      - name: Create and push tag
        run: |
          git tag ${{ steps.taggen.outputs.new_tag }}
          git push origin ${{ steps.taggen.outputs.new_tag }}

      - name: Build and zip for all OS/Arch combos
        run: |
          VERSION=${{ steps.taggen.outputs.new_tag }}

          PLATFORMS=(
            "linux-x64"
            "linux-x86"
            "linux-arm64"
            "win-x64"
            "win-x86"
            "win-arm64"
          )

          for RID in "${PLATFORMS[@]}"; do
            echo "â–¶ Building for $RID..."
            OUTDIR="publish/$RID"
            dotnet publish -c Release -r "$RID" -o "$OUTDIR" --self-contained false -p:InformationalVer="$VERSION"

            OS=$(echo $RID | cut -d'-' -f1)
            ARCH=$(echo $RID | cut -d'-' -f2)
            ZIP_NAME="AGC_Management_${OS}_${ARCH}_${VERSION}.zip"

            echo "ðŸ“¦ Creating $ZIP_NAME..."
            cd "$OUTDIR"
            zip -r "../../$ZIP_NAME" .
            cd - > /dev/null
          done

      - name: Create Draft GitHub Release with all ZIPs
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.taggen.outputs.new_tag }}
          name: ${{ steps.taggen.outputs.new_tag }}
          draft: true
          generate_release_notes: true
          files: |
            AGC_Management_linux_*.zip
            AGC_Management_win_*.zip
