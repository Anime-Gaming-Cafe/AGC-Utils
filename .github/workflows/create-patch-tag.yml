name: Weekly Patch Tag

on:
  schedule:
    - cron: '0 14 * * 6'
  workflow_dispatch:

jobs:
  check-and-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest version tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Check for dependency changes
        id: deps_changed
        run: |
          TAG=${{ steps.latest_tag.outputs.latest_tag }}

          if [ -z "$TAG" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          CHANGED=$(git diff --name-only "$TAG"..HEAD | grep -E '\.csproj$|Directory\.Packages\.props$|global\.json$' || true)

          if [ -n "$CHANGED" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine next patch tag
        if: steps.deps_changed.outputs.changed == 'true'
        id: taggen
        run: |
          BASE=${{ steps.latest_tag.outputs.latest_tag }}

          if [[ "$BASE" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9]+))?$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            suffix="${BASH_REMATCH[4]}"
            if [[ -z "$suffix" ]]; then
              next="1"
            else
              next="$((suffix + 1))"
            fi
            NEW_TAG="v${major}.${minor}.${patch}-${next}"
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          else
            echo "Invalid tag format: $BASE"
            exit 1
          fi

      - name: Create and push new tag
        if: steps.deps_changed.outputs.changed == 'true'
        run: |
          git tag ${{ steps.taggen.outputs.new_tag }}
          git push origin ${{ steps.taggen.outputs.new_tag }}
