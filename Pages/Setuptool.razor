@page "/setuptool"
@using AGC_Management.Entities.Web
@using AGC_Management.Enums.Web
@using AGC_Management.Services
@using AGC_Management.Utils
@inject NavigationManager NavigationManager


@if (!existAdminUser)
{
    <h3>Admin Benutzer erstellen</h3>
    <EditForm Model="@model" OnValidSubmit="HandleSubmit">
        <div class="form-group">
            <label for="Username">User:</label>
            <InputText id="Username" class="form-control" @bind-Value="model.Username" placeholder="Benutzername" />
        </div>
    
        <div class="form-group">
            <label for="Password">Pass:</label>
            <InputText id="Password" class="form-control" @bind-Value="model.Password" placeholder="Passwort" type="password" />
        </div>
    
        <div class="form-group">
            <label for="ConfirmPassword">Confirm Pass:</label>
            <InputText id="ConfirmPassword" class="form-control" @bind-Value="model.ConfirmPassword" placeholder="Passwort erneut" type="password" />
        </div>
    
        <div class="form-group">
            <label for="CreationToken">Authorization Key:</label>
            <InputText id="CreationToken" class="form-control" @bind-Value="model.CreationToken" placeholder="Schlüssel" type="password" />
        </div>
    
        <br>
        <button class="btn btn-primary" type="submit">Create Admin User</button>
    </EditForm>

    <style>
    .form-group {
        margin-bottom: 10px;
        max-width: 50vh;
    }
</style>
}
else
{
    <p>¯\_(ツ)_/¯</p>
}

@code {
    CreateFirstAdminModel model = new ();
    
    private bool existAdminUser = true;
    
    private bool keywrong = false;
    private bool passwordsNotEqual = false;
    
    
    
    protected override async Task OnInitializedAsync()
    {
        existAdminUser = await AuthUtils.HasAdministrativeUsers();
    }
    
    private async Task HandleSubmit()
    {
        passwordsNotEqual = false;
        keywrong = false;
        
        if (model.Password != model.ConfirmPassword)
        {
            passwordsNotEqual = true;
            return;
        }
        
        if (!IsValidCreationToken(model.CreationToken))
        {
            keywrong = true;
            return;
        }
        
        await CreateAdminUser(model);
        NavigationManager.NavigateTo("/");
    }
    
    
    private bool IsValidCreationToken(string token)
    {
        return token == Program.TempVariables.IntialConfigToken;
    }
    
    
    private async Task CreateAdminUser(CreateFirstAdminModel userModel)
    {
        var user = model;
        var dbstring = DatabaseService.GetConnectionString();
        await using var con = new NpgsqlConnection(dbstring);
        await con.OpenAsync();
        var cmd = new NpgsqlCommand("INSERT INTO web_users (username, hashed_password, access_level) VALUES (@username, @password, @role)", con);
        cmd.Parameters.AddWithValue("username", user.Username);
        cmd.Parameters.AddWithValue("password", HashPassword(user.Password));
        cmd.Parameters.AddWithValue("role", AccessLevel.Administrator.ToString());
        await cmd.ExecuteNonQueryAsync();
        await con.CloseAsync();
        existAdminUser = true;
    }
    
    private string HashPassword(string password)
    {
        return BCrypt.Net.BCrypt.HashPassword(password);
    }
    
    
    
    
}
