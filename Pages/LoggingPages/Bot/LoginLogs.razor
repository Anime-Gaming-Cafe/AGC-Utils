@page "/logs/botlogs/webuilogins"
@using AGC_Management.Utils
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "BotOwner, Administrator")]
<h3>Dashboard Anmeldelogs</h3>


@if (!loaded)
{
    <h2>Loading... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></h2>
}
else if (!hasLogs && loaded)
{
    <h2>Es sind keine Logs vorhanden.</h2>
}
else
{
    <div style="max-width: 1200px" class="dashboard-logs">
        <table class="table table-responsive table-striped">
            <thead>
            <tr>
                <th>User</th>
                <th>IP</th>
                <th>User-Agent</th>
                <th>Zeitpunkt</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var log in displayedLogs)
            {
                <tr>
                    <td class="wrap-text" @onclick="() => ShowToastAndCopyToClipboard(log.UserIdentifier)">
                                                   @GetUsernameOrId(log.UserIdentifier, false).GetAwaiter().GetResult()</td>
                    <td class="wrap-text">@log.IpAddress</td>
                    <td class="wrap-text">@log.UserAgent</td>
                    <td class="wrap-text">@Converter.GetDateFromTimestamp(log.UnixTime)</td>
                </tr>
            }
            </tbody>
        </table>
        <div class="pagination-lg">
            <div class="page-info">Seite @currentPage von @totalPages</div>
            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@IsFirstPage">Vorherige Seite</button>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage">Nächste Seite</button>
        </div>
    </div>

    <Snackbar @ref="snackbar" Color="SnackbarColor.Dark">
        <SnackbarBody>
            User ID wurde in die Zwischenablage kopiert.
            <SnackbarAction Clicked="@(() => snackbar.Hide())">Ok.</SnackbarAction>
        </SnackbarBody>
    </Snackbar>
}
    
@code {
    private Snackbar snackbar;
    private bool loaded;
    private bool hasLogs;
    private readonly int itemsPerPage = 25;
    private List<LoginLogDatabaseItem> logs = new();
    private List<LoginLogDatabaseItem> displayedLogs => logs.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage * itemsPerPage >= totalItems;

    private int currentPage = 1;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
        totalItems = logs.Count;

        loaded = true;
    }

    private async Task LoadLogs()
    {
        logs = new();

        // Load logs from database
        var connection = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = connection.CreateCommand();
        command.CommandText = "SELECT userid, useragent, ip, timestamp FROM dashboardlogins ORDER BY timestamp DESC";
        await using var reader = await command.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var ipdata = reader.GetString(2);
            if (ipdata.Contains(","))
            {
                ipdata = ipdata.Split(",")[0];
            }
            var log = new LoginLogDatabaseItem
            {
                UserIdentifier = reader.GetString(0),
                UserAgent = reader.GetString(1),
                IpAddress = ipdata,
                UnixTime = reader.GetInt64(3)
            };
            logs.Add(log);
            
        }

        hasLogs = logs.Count > 0;
    }


    private async Task ShowToastAndCopyToClipboard(string userId)
    {
        await snackbar.Show();
        await JSRuntime.InvokeVoidAsync("copyToClipboard", userId);
    }


    private async Task<string> GetUsernameOrId(string UserIdentifier, bool fetch = false)
    {
        try
        {
            if (!ulong.TryParse(UserIdentifier, out var userId))
            {
                return UserIdentifier;
            }
            var isCached = await ToolSet.IsUserInCache(userId);
            if (isCached)
            {
                return CurrentApplication.DiscordClient.UserCache[userId].Username;
            }

            if (!fetch) return userId.ToString();
            var user = await CurrentApplication.DiscordClient.GetUserAsync(userId);
            var ismig = user.IsMigrated;
            if (ismig)
            {
                return user.Username;
            }

            return user.UsernameWithDiscriminator;
        }
        catch (Exception)
        {
            return UserIdentifier;
        }
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }


    // entities

    private class LoginLogDatabaseItem
    {
        public string UserIdentifier { get; set; }
        public string UserAgent { get; set; }
        public string IpAddress { get; set; }
        public long UnixTime { get; set; }
    }
}