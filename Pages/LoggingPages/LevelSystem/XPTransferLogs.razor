@page "/logs/levelsystem/xptransferlogs"
@using AGC_Management.Utils
@attribute [Authorize (Roles="BotOwner, Administrator, HeadMod")]
@inject IJSRuntime JSRuntime
<h3>XP Transfer Logs</h3>

@if (loaded && hasLogs)
{
    <div class="dashboard-logs">
        <table class="table table-responsive table-striped">
            <thead>
            <tr>
                <th>Quellnutzer</th>
                <th>Zielnutzer</th>
                <th>Executor</th>
                <th>Menge</th>
                <th>Zeitstempel</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var log in displayedLogs)
            {
                <tr>
                    <td @onclick="async () => await ShowToastAndCopyToClipboard(log.FromUserId.ToString())" title="@log.FromUserId.ToString()" class="wrap-text">@GetUsernameOrId(log.FromUserId).GetAwaiter().GetResult()</td>
                    <td @onclick="async () => await ShowToastAndCopyToClipboard(log.ToUserId.ToString())" title="@log.ToUserId.ToString()" class="wrap-text">@GetUsernameOrId(log.ToUserId).GetAwaiter().GetResult()</td>
                    <td @onclick="async () => await ShowToastAndCopyToClipboard(log.ExecutorId.ToString())" title="@log.ExecutorId.ToString()" class="wrap-text">@GetUsernameOrId(log.ExecutorId, true).GetAwaiter().GetResult()</td>
                    <td class="wrap-text">@log.Amount XP</td>
                    <td class="wrap-text">@Converter.GetDateFromTimestamp((long)log.UnixTime)</td>
                </tr>
            }
            </tbody>
        </table>
        <div class="pagination-lg">
            <div class="page-info">Seite @currentPage von @totalPages</div>
            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@IsFirstPage">Vorherige Seite</button>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage">Nächste Seite</button>
        </div>
    </div>
    
    <Snackbar @ref="snackbar" Color="SnackbarColor.Dark">
        <SnackbarBody>
            User ID wurde in die Zwischenablage kopiert.
            <SnackbarAction Clicked="@(()=>snackbar.Hide())">Ok.</SnackbarAction>
        </SnackbarBody>
    </Snackbar>
}
else if (!loaded)
{
    <p>Loading... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></p>
}
else if (!hasLogs && loaded)
{
    <h2>Es sind keine Logs vorhanden.</h2>
}



@code {
    Snackbar snackbar;
    private bool loaded = false;
    private bool hasLogs = false;
    private int itemsPerPage = 25;
    private List<XpTransferLogDatabaseItem> logs = new List<XpTransferLogDatabaseItem>();
    private List<XpTransferLogDatabaseItem> displayedLogs => logs.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage).ToList();

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage * itemsPerPage >= totalItems;
    
    private int currentPage = 1;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
        totalItems = logs.Count;
        
        loaded = true;
    }
    
    private async Task ShowToastAndCopyToClipboard(string userId)
    {
        await snackbar.Show();
        await JSRuntime.InvokeVoidAsync("copyToClipboard", userId);
    }

    
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        StateHasChanged();
    }
    
    private async Task<string> GetUsernameOrId(ulong userId, bool fetch = false)
    {
        try
        {
            var isCached = await ToolSet.IsUserInCache(userId);
            if (isCached)
            {
                return CurrentApplication.DiscordClient.UserCache[userId].Username;
            }

            if (!fetch) return userId.ToString();
            var user = await CurrentApplication.DiscordClient.GetUserAsync(userId);
            return user.Username;
        }
        catch (Exception)
        {
            return userId.ToString();
        }

    }
    
    private async Task<string> GetDateFromUnixtime(ulong unixTime)
    {
        var date = DateTimeOffset.FromUnixTimeSeconds((long) unixTime);
        return date.ToString("dd.MM.yyyy HH:mm:ss");
    }
    
    private async Task LoadLogs()
    {
        logs = new List<XpTransferLogDatabaseItem>();
        
        // Load logs from database
        var connection = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = connection.CreateCommand();
        command.CommandText = "SELECT sourceuserid, destinationuserid, executorid, amount, timestamp FROM xptransferlogs ORDER BY timestamp DESC";
        await using var reader = await command.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            var fromUserId = reader.GetInt64(0);
            var toUserId = reader.GetInt64(1);
            var executorId = reader.GetInt64(2);
            var amount = reader.GetInt32(3);
            var timestamp = reader.GetInt64(4);
            
            
            logs.Add(new XpTransferLogDatabaseItem
            {
                FromUserId = (ulong) fromUserId,
                ToUserId = (ulong) toUserId,
                ExecutorId = (ulong) executorId,
                Amount = amount,
                UnixTime = (ulong) timestamp
            });
        }
        
        hasLogs = logs.Count > 0;
       
    }

    
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }
    

    // Entities
    
    private class XpTransferLogDatabaseItem
    {
        public ulong FromUserId { get; set; }
        public ulong ToUserId { get; set; }
        public ulong ExecutorId { get; set; }
        public int Amount { get; set; }
        public ulong UnixTime { get; set; }
    }
    
}