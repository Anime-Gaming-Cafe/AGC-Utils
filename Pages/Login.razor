@page "/login"
@using AGC_Management.Providers
@using AGC_Management.Utils
@using AGC_Management.Entities.Web
@using AGC_Management.Interfaces
@using AGC_Management.Services.Web
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthService AuthService

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    User: <InputText class="rounded border-6" @bind-Value="loginModel.Username" placeholder="Benutzername" />
    <br>
    Pass: <InputText class="rounded border-1" @bind-Value="loginModel.Password" placeholder="Passwort" type="password" />
    <br>
    <br>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@if (loginFailed)
{
    <br/>
    <div class="alert alert-danger" role="alert">
        Login fehlgeschlagen. Bitte überprüfe deine Anmeldeinformationen.
    </div>
}


@code {
    private readonly LoginModel loginModel = new();
    bool loginFailed;

    protected override void OnInitialized()
    {
        if (AuthService.IsUserAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        
        httpContext.Session.SetString("IsAuthenticated", "false");

        var (loginSuccess, accessLevel) = await AuthService.Login(loginModel.Username, loginModel.Password);
        if (loginSuccess)
        {
            httpContext.Session.SetString("IsAuthenticated", "true");
            httpContext.Session.SetString("Username", loginModel.Username);
            httpContext.Session.SetString("AccessLevel", accessLevel);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            loginFailed = true;
            StateHasChanged(); 
        }
    }

}