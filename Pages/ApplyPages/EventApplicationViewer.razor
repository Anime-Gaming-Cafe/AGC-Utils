@page "/teamarea/applysystem/vieweventapplication/{applicationid}"
@inject IHttpContextAccessor HttpContextAccessor
@inject UserService UserService
@using AGC_Management.Entities
@using AGC_Management.Utils
@using AGC_Management.Controller

<h3 class="text-center mt-5">Bewerbungsdetails</h3>


@if (found)
{
<h1 class="text-center mt-5">Bewerbungsdetails von @getusernamefromid(application.UserId)</h1>
<div class="container mt-5 mb-5">
    <div class="glass-card mb-3">
        <div class="card-header glass-effect-bg">
            Bewerbungsdetails
        </div>
        <ul class="list-group  list-group-flush">
            
            <li class="list-group-item">Nutzername: <strong>@getusernamefromid(application.UserId)</strong></li>
            <li class="list-group-item">NutzerID: <strong>@application.UserId</strong></li>
            <li class="list-group-item">Nutzer erstellt am: <strong>@getusercreatedtime(application.UserId)</strong></li>
            <li class="list-group-item">Beigetreten: <strong>@getuserjointime(application.UserId)</strong></li>
            <li class="list-group-item"><strong><span class="mb-1">         <div class="alert @GetCSSStatusFromInt(application.Status)" role="alert">
                                                                                  @GetStatusFromInt(@application.Status)
                                                                              </div> </span></strong></li>
            <li class="list-group-item">Level: <strong>@GetLevel((ulong)application.UserId)</strong></li>

            <li class="list-group-item">Zeit der Bewerbungseinreichung: <strong>@ToolSet.GetFormattedTimeFromUnixAndRespectTimeZone(application.Timestamp)</strong></li>
        </ul>
    </div>
    <div class="d-flex justify-content-center mb-3">
        <div class="form-group w-100">
            <p>Bewerbungstext</p>
            <textarea class="form-control glassy-input" id="applymessage" rows="25" readonly></textarea>

        </div>
    </div>
    <div class="glass-card mb-3">
        <div class="card-header">
            Optionen
        </div>
        <div class="card-body">
            <div class="dropdown">
                <button class="btn btn-success-glass dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Kennzeichnen
                </button>
                <ul class="dropdown-menu">
                    <li><button class="dropdown-item" @onclick="async () => await setstatus(4)" href="#">Abgelehnt</button></li>
                    <li><button class="dropdown-item" @onclick="async () => await setstatus(2)" href="#">Vorgemerkt</button></li>
                    <li><button class="dropdown-item" @onclick="async () => await setstatus(3)" href="#">Angenommen</button></li>
                    <li><button class="dropdown-item" @onclick="async () => await setstatus(1)" href="#">Kennzeichnung entfernen</button></li>
                </ul>
            </div>
            <!-- <button type="button" data-bs-toggle="modal" data-bs-target="#flagsandwarns" class="btn btn-danger-glass">Flags und Verwarnungen anzeigen</button> -->
        </div>
    </div>
</div>
}
else if (!loaded)
{
    <div class="container mt-5">
    <div class="alert alert-info-glass" role="alert">
        <h4 class="alert-heading">Lade Bewerbung</h4>
        <p>Die Bewerbung mit der ID: <strong>@applicationid</strong> wird geladen.</p>
        <hr>
        <p class="mb-0">Bitte warte einen Moment.</p>
    </div>
</div>
    }
else if (!found && loaded)
{
    <div class="container mt-5">
    <div class="alert alert-danger-glass" role="alert">
        <h4 class="alert-heading">Fehler</h4>
        <p>Die Bewerbung mit der ID: <strong>@applicationid</strong> konnte nicht gefunden werden.</p>
        <hr>
        <p class="mb-0">Bitte überprüfen Sie die ID und versuchen Sie es erneut.</p>
    </div>
</div>
}


@code {
    [Parameter]
    public string applicationid { get; set; }
    private bool found = false;
    private bool loaded = false;
    private Application? application = null;


    private int GetLevel(ulong userid)
    {
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        using var command = db.CreateCommand();
        command.CommandText = "SELECT current_level FROM levelingdata WHERE userid = @userid";
        command.Parameters.AddWithValue("userid", (long)userid);
        using var reader = command.ExecuteReader();
        if (reader.Read())
        {
            return reader.GetInt32(0);
        }
        return 0;
    }

    private async Task AddCurrentUserToSeenByIfNotAlready(long userid)
    {
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = db.CreateCommand();
        command.CommandText = "SELECT seenby FROM bewerbungen WHERE bewerbungsid = @applicationid";
        command.Parameters.AddWithValue("applicationid", applicationid);
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            var seenByIsNull = reader.IsDBNull(0);
            if (seenByIsNull)
            {
                await using var updateCommand = db.CreateCommand();
                updateCommand.CommandText = "UPDATE bewerbungen SET seenby = ARRAY[@userid] WHERE bewerbungsid = @applicationid";
                updateCommand.Parameters.AddWithValue("userid", userid);
                updateCommand.Parameters.AddWithValue("applicationid", applicationid);
                await updateCommand.ExecuteNonQueryAsync();
            }
            else
            {
                var seenby = reader.GetFieldValue<long[]>(0);
                if (!seenby.Contains(userid))
                {
                    await using var updateCommand = db.CreateCommand();
                    updateCommand.CommandText = "UPDATE bewerbungen SET seenby = array_append(seenby, @userid) WHERE bewerbungsid = @applicationid";
                    updateCommand.Parameters.AddWithValue("userid", userid);
                    updateCommand.Parameters.AddWithValue("applicationid", applicationid);
                    await updateCommand.ExecuteNonQueryAsync();
                }
            }
        }
    }

    private async Task LoadApplication()
    {
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = db.CreateCommand();
        command.CommandText = "SELECT bewerbungsid, userid, positionname, status, timestamp, bewerbungstext, seenby FROM bewerbungen WHERE bewerbungsid = @applicationid AND positionname = @positionname";
        command.Parameters.AddWithValue("applicationid", applicationid);
        command.Parameters.AddWithValue("positionname", "Eventmanager");
        await using var reader = await command.ExecuteReaderAsync();
        if (await reader.ReadAsync())
        {
            var apply = new Application
            {
                BewerbungsId = reader.GetString(0),
                UserId = reader.GetInt64(1),
                PositionName = reader.GetString(2),
                Status = reader.GetInt32(3),
                Timestamp = reader.GetInt64(4),
                Bewerbungstext = reader.GetString(5),
            };
            application = apply;
            found = true;
        }
        
    }
    
    private async Task UpdateFromUnreadToRead()
    {
        if (application == null)
        {
            return;
        }
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = db.CreateCommand();
        command.CommandText = "UPDATE bewerbungen SET status = 1 WHERE bewerbungsid = @applicationid";
        command.Parameters.AddWithValue("applicationid", application.BewerbungsId);
        await command.ExecuteNonQueryAsync();
    }
    
    
    private string GetStatusFromInt(int status)
    {
        return status switch
        {
            0 => "Ungelesen",
            1 => "Gelesen",
            2 => "Vorgemerkt",
            3 => "Angenommen",
            4 => "Abgelehnt",
            _ => "Ungelesen"
        };
    }
    
    private string GetCSSStatusFromInt(int status)
    {
        return status switch
        {
            0 => "alert-danger-glass",
            1 => "alert-info-glass",
            2 => "alert-warning-glass",
            3 => "alert-success-glass",
            4 => "alert-danger-glass",
            _ => "Ungelesen"
        };
    }
    private string getusercreatedtime(long id)
    {
        var users = CurrentApplication.DiscordClient.UserCache.Values.ToList();
        foreach (var user in users)
        {
            if (user.Id == (ulong)id)
            {
                var ct = user.CreationTimestamp.ToUnixTimeSeconds();
                return ToolSet.GetFormattedTimeFromUnixAndRespectTimeZone(ct);
            }
        }
        return "Unbekannt";
    }
    
    private string getuserjointime(long id)
    {
        var users = CurrentApplication.TargetGuild.Members.Values.ToList();
        foreach (var user in users)
        {
            if (user.Id == (ulong)id)
            {
                // respekt timezone
                var jt = user.JoinedAt.ToUnixTimeSeconds();
                return ToolSet.GetFormattedTimeFromUnixAndRespectTimeZone(jt);
            }
        }
        return "Unbekannt";
    }
    
    
    private string getusernamefromid(long id)
    {
        var users = CurrentApplication.DiscordClient.UserCache.Values.ToList();
        foreach (var user in users)
        {
            if (user.Id == (ulong)id)
            {
                return user.Username;
            }
        }
        return id.ToString();
    }
    
    
    private async Task setstatus(int status)
    {
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        using var command = db.CreateCommand();
        command.CommandText = "UPDATE bewerbungen SET status = @status WHERE bewerbungsid = @applicationid";
        command.Parameters.AddWithValue("status", status);
        command.Parameters.AddWithValue("applicationid", applicationid);
        command.ExecuteNonQuery();
        await LoadApplication();
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadApplication();
        await Task.Delay(1000);
        loaded = true;
        var userid = UserService.GetUserId(HttpContextAccessor.HttpContext);
        if (userid != null)
        {
            await AddCurrentUserToSeenByIfNotAlready((long)userid);
        }
        if (application != null && application.Status == 0)
        {
            await UpdateFromUnreadToRead();
        }
        
    }

}