@page "/teamarea/applysystem/viewapplications"
@using AGC_Management.Entities
@using AGC_Management.Utils
@attribute [Authorize(Roles = "BotOwner, Administrator, HeadModerator")]


<div class="search-bar-centered">
    <input type="text" class="search-bar-input" placeholder="Suche nach Nutzername / Nutzer ID" @bind="searchQuery">
    <button class="search-bar-button" @onclick="ApplySearch">
        <i class="fas fa-search"></i>
    </button>
    <button class="search-bar-button" @onclick="RefreshApplications">
        <i class="fas fa-refresh"></i>
    </button>
</div>


<div class="container mt-5">
    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (applications.Count == 0 && searchQuery == "")
    {
        <div class="alert alert-warning-glass" role="alert">
            Es wurden keine Bewerbungen gefunden.
        </div>
    }
    else if (applications.Count == 0 && searchQuery != "")
    {
        <div class="alert alert-warning-glass" role="alert">
            Es wurden keine Bewerbungen gefunden, die zu deiner Suche passen.
        </div>
    }
    else
    {
        @foreach (var application in applications)
        {
            <div class="glass-card mb-3">
                <ul class="list-group @getcssfromstatus(application.Status) list-group-flush">
                    <li class="list-group-item">
                        <a href="teamarea/applysystem/viewapplication/@application.BewerbungsId">
                            <h5 class="mb-1">Username: @ToolSet.GetFormattedName((ulong)application.UserId)</h5>
                            <p class="mb-1">NutzerID: @application.UserId</p>
                            <p class="mb-1">Bewerbungsposition: @application.PositionName</p>
                            <small>Bewerbung eingereicht am: @ToolSet.GetFormattedTimeFromUnixAndRespectTimeZone(application.Timestamp)</small>
                            <p class="mb-1">Status: <strong>@GetStatusFromInt(application.Status)</strong></p>

                            @if (application.SeenBy.Count > 0)
                            {
                                <div class="seen-by">
                                    <div class="seen-by-title">Gesehen von:</div>
                                    @foreach (var seenuser in application.SeenBy)
                                    {
                                        <img title="@getusernamefromid(seenuser)" src="@getprofileimagefromid(seenuser)" alt="profile" class="profile-image">
                                    }
                                </div>
                            }
                        </a>
                    </li>
                </ul>
            </div>
        }
    }
</div>


@code {
    private List<Application> applications = new();
    private List<Application> FilteredApplications => applications.Where(a => a.UserId.ToString().Contains(searchQuery) || GetUsernameById(a.UserId).Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    private string searchQuery = "";
    private bool loading;

    private string getcssfromstatus(int status)
    {
        return status switch
        {
            0 => "unread",
            1 => "read",
            2 => "vorgemerkt",
            3 => "angenommen",
            4 => "abgelehnt",
            _ => "unread"
        };
    }

    private async Task RefreshApplications()
    {
        loading = true;
        applications.Clear();
        await GetApplications();
        StateHasChanged();
        loading = false;
    }

    private string GetStatusFromInt(int status)
    {
        return status switch
        {
            0 => "Ungelesen",
            1 => "Gelesen",
            2 => "Abgelehnt",
            3 => "Vorgemerkt",
            4 => "Angenommen",
            _ => "Ungelesen"
        };
    }

    private string getusernamefromid(long id)
    {
        var users = CurrentApplication.DiscordClient.UserCache.Values.ToList();
        foreach (var user in users)
        {
            if (user.Id == (ulong)id)
            {
                return user.Username;
            }
        }

        return id.ToString();
    }

    private string getprofileimagefromid(long id)
    {
        var users = CurrentApplication.DiscordClient.UserCache.Values.ToList();
        foreach (var user in users)
        {
            if (user.Id == (ulong)id)
            {
                return user.AvatarUrl;
            }
        }

        var fallbackuser = ToolSet.GetFallbackUser(ulong.Parse(id.ToString()));
        return fallbackuser.Avatar;
    }

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        await GetApplications();
        loading = false;
    }


    //bewerbungen (bewerbungsid TEXT, userid BIGINT, positionname TEXT, status INTEGER DEFAULT 0, timestamp BIGINT, bewerbungstext TEXT, seenby BIGINT[])
    private async Task GetApplications()
    {
        var db = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var command = db.CreateCommand();
        command.CommandText = "SELECT bewerbungsid, userid, positionname, status, timestamp, bewerbungstext, seenby FROM bewerbungen ORDER BY timestamp DESC";
        await using var reader = await command.ExecuteReaderAsync();
        while (await reader.ReadAsync())
        {
            List<long> seenby = new List<long>();
            try
            {
                seenby = reader.GetFieldValue<long[]>(6).ToList();
            }
            catch (InvalidCastException)
            {
                seenby = new List<long>();
            }

            applications.Add(new Application
            {
                BewerbungsId = reader.GetString(0),
                UserId = reader.GetInt64(1),
                PositionName = reader.GetString(2),
                Status = reader.GetInt32(3),
                Timestamp = reader.GetInt64(4),
                Bewerbungstext = reader.GetString(5),
                SeenBy = seenby
            });
        }
    }

    private async Task ApplySearch()
    {
        applications = FilteredApplications;

        if (searchQuery == "")
        {
            applications.Clear();
            await GetApplications();
        }


        StateHasChanged();
    }

    private string GetUsernameById(long id)
    {
        return getusernamefromid(id);
    }


}