@page "/benutzereinstellungen/levelsystem/adjustrankcard"
@using AGC_Management.Controller
@using System.Text.Json
@using AGC_Management.Utils
@using SkiaSharp
@inject IJSRuntime JSRuntime
@inject UserService UserService
@inject IHttpContextAccessor httpContextAccessor
@attribute [Authorize(Roles = "BotOwner, Administrator, HeadMod, Moderator, Supporter, Team, User")]


<div class="container">
    <h1>Rankcard Einstellungen</h1>
    <div class="row">
        <div class="col-md-6">
            <h2>Farbe</h2>
            <input type="color" @onchange="ColorChanged" value="@color"/>
            <h2>Schriftart</h2>
            <select bind="@font" @onchange="FontChanged">
                @foreach (var fontFamily in SKFontManager.Default.GetFontFamilies().ToList())
                {
                    <option value="@fontFamily" selected="@(font == fontFamily)">@fontFamily</option>
                }
            </select>

            <h2>Hintergrundbild (Empfohlen: 930x280) (Max: 5MB)</h2>
            <InputFile OnChange="UploadFile"/>
            @if (!string.IsNullOrWhiteSpace(uploadStatus))
            {
                <p class="text-success">@uploadStatus</p>
            }
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }

            <button class="btn btn-primary" @onclick="async () => await SaveSettings()">Speichern und Anwenden</button>
            @if (hasCustomRankCardSettings)
            {
                <button class="btn btn-danger" @onclick="async () => await ResetCard()">Rangkarte zurücksetzen</button>
            }
        </div>
        <div class="col-md-6">
            <h2>Vorschau</h2>
            @if (!string.IsNullOrWhiteSpace(base64String))
            {
                <img src="@base64String" alt="Rangkarte" class="img-fluid"/>
            }
            else
            {
                <h1>Vorschau wird generiert</h1>
            }
        </div>
    </div>
</div>

@code {
    private string imageToInstall = "";
    private bool firstRender = false;
    private string base64String = "";
    private bool hasCustomRankCardSettings;
    private string color = "#9f00ff";
    private string font = "Verdana";
    private bool hasImageChanged;
    private bool hasColorChanged;
    private bool hasFontChanged;
    private string uploadStatus = "";
    private string errorMessage = "";


    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            uploadStatus = "Keine Datei ausgewählt.";
            return;
        }

        if (file.Size > 5242880)
        {
            errorMessage = "Die Datei ist zu groß oder hat ein ungültiges Format. Bitte wählen Sie eine PNG, JPG oder JPEG Datei, die kleiner als 5MB ist.";
            uploadStatus = "";
            return;
        }

        if ((file.ContentType != "image/png" && file.ContentType != "image/jpg" && file.ContentType != "image/jpeg" && file.ContentType != "image/webp"))
        {
            errorMessage = "Die Datei hat ein ungültiges Format. Bitte wählen Sie eine PNG, JPG oder JPEG Datei, die kleiner als 3MB ist.";
            uploadStatus = "";
            return;
        }

        try
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            imageToInstall = Convert.ToBase64String(ms.ToArray());
            hasImageChanged = true;
            uploadStatus = "Bild erfolgreich hochgeladen.";
            errorMessage = "";
        }
        catch (Exception ex)
        {
            errorMessage = $"Fehler beim Hochladen der Datei: {ex.Message}";
            uploadStatus = "";
        }
    }


    void FontChanged(ChangeEventArgs e)
    {
        font = e.Value.ToString();
        Console.WriteLine(font);
        hasFontChanged = true;
    }

    void ColorChanged(ChangeEventArgs e)
    {
        color = e.Value.ToString();
        hasColorChanged = true;
    }

    private async Task ResetCard()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = @"DELETE FROM userrankcardsettings WHERE userid = @userid";
        cmd.Parameters.AddWithValue("userid", (long)userId);
        await cmd.ExecuteNonQueryAsync();
        await OnInitializedAsync();
    }

    private async Task SaveSettings()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        if (!string.IsNullOrWhiteSpace(imageToInstall) && hasImageChanged)
        {

            bool isActivated = false;
            try
            {
                isActivated = bool.Parse(BotConfig.GetConfig()["LinkLens"]["Active"]);
            }
            catch (Exception)
            {
                // ignored
            }

            if (isActivated)
            {
                uploadStatus = "Bild wird moderativ geprüft...";
                using var client = new HttpClient();
                var apikey = BotConfig.GetConfig()["LinkLens"]["API-KEY"];
                client.DefaultRequestHeaders.Add("api-key", apikey);
                client.DefaultRequestHeaders.Add("User-Agent",
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.1000.0 Safari/537.36");
                var content = new StringContent($"{{\"imageBase64\":\"{imageToInstall}\"}}", null, "application/json");
                var response = await client.PostAsync("https://api.linklens.xyz/analyze-levelcard", content);
                var responseString = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<RootObject>(responseString);
                if (result.analysis.summary.reject_reason.Count > 0)
                {
                    var rejectReasons = "";
                    foreach (var reason in result.analysis.summary.reject_reason)
                    {
                        rejectReasons += reason.text + ", ";
                    }

                    errorMessage = $"Das Bild wurde abgelehnt, da es folgende Gründe hat: {rejectReasons}";
                    uploadStatus = "";
                    return;
                }

                uploadStatus = "Bild wurde moderativ geprüft und ist in Ordnung. Bild wird gespeichert...";

                await Task.Delay(2000);
            }
            try
            {
                await SaveCustomRankCardSetting("imagedata", imageToInstall, userId);

                uploadStatus = "Bild wurde erfolgreich gespeichert.";
            }
            catch (Exception ex)
            {
                errorMessage = $"Fehler beim moderativen prüfen der Datei: {ex.Message}";
                uploadStatus = "";
            }
        }

        if (hasColorChanged)
        {
            await SaveCustomRankCardSetting("barcolor", color, userId);
        }

        if (hasFontChanged)
        {
            await SaveCustomRankCardSetting("textfont", font, userId);
        }

        await OnInitializedAsync();
    }


    public class RejectReason
    {
        public string id { get; set; }
        public string text { get; set; }
    }

    public class Summary
    {
        public string action { get; set; }
        public double reject_prob { get; set; }
        public List<RejectReason> reject_reason { get; set; }
    }

    public class Analysis
    {
        public Summary summary { get; set; }
    }

    public class RootObject
    {
        public Analysis analysis { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await RetrieveCurrentSettings();
        await RenderPage();
    }

    private async Task SaveCustomRankCardSetting(string settingName, string value, ulong userId)
    {
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = $@"
    INSERT INTO userrankcardsettings (userid, {settingName})
    VALUES (@userid, @value)
    ON CONFLICT (userid)
    DO UPDATE SET {settingName} = @value";
        cmd.Parameters.AddWithValue("value", value);
        cmd.Parameters.AddWithValue("userid", (long)userId);
        await cmd.ExecuteNonQueryAsync();
    }

    private async Task RenderPage()
    {
        base64String = await RetrieveRankCardForCurrentUser();
        StateHasChanged();
    }

    private async Task<string> RetrieveRankCardForCurrentUser()
    {
        var context = httpContextAccessor.HttpContext;
        var currentuserid = UserService.GetUserId(context);
        var user = await CurrentApplication.DiscordClient.GetUserAsync(ulong.Parse(currentuserid.ToString()));
        var rank = await LevelUtils.GetRank(user.Id);
        var level = rank[user.Id].Level;
        var totalxp = rank[user.Id].Xp;
        var xpForCurrentLevel = LevelUtils.XpForLevel(level);
        var xpForNextLevel = LevelUtils.XpForLevel(level + 1);
        var xpForThisLevel = xpForNextLevel - xpForCurrentLevel;
        var xpForThisLevelUntilNow = totalxp - xpForCurrentLevel;
        var percentage = (int)(xpForThisLevelUntilNow / (float)xpForThisLevel * 100);
        var userRank = await LevelUtils.GetUserRankAsync(user.Id);
        var imagedata = await ImageUtils.GenerateRankCard(user, xpForThisLevelUntilNow, level, userRank, percentage,
            totalxp,
            xpForThisLevel);
        var imgstream = imagedata.AsStream();
        byte[] bytes = new byte[imgstream.Length];
        imgstream.Read(bytes, 0, (int)imgstream.Length);
        return "data:image/png;base64," + Convert.ToBase64String(bytes);
    }

    private async Task<string> RetrieveCurrentImageforCurrentUser()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var i = await ImageUtils.HasCustomRankCardSettings(userId);
        if (i)
        {
            var settings = await ImageUtils.GetCustomRankCardSettings(userId);
            // check if bg is null
            if (settings.Background != null)
            {
                return settings.Background;
            }

            return await ImageUtils.GetFallbackBackground();
            return settings.Background;
        }

        return await ImageUtils.GetFallbackBackground();
    }

    private async Task RetrieveCurrentSettings()
    {
        bool hs = await ImageUtils.HasCustomRankCardSettings(ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString()));
        hasCustomRankCardSettings = hs;
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var settings = await ImageUtils.GetCustomRankCardSettings(userId);
        if (settings != null)
        {
            color = settings.HexColor ?? "#000000";
            font = settings.Font ?? "Verdana";
            base64String = settings.Background ?? await RetrieveCurrentImageforCurrentUser();
        }
    }

}