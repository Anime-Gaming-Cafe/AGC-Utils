@page "/benutzereinstellungen/levelsystem/adjustrankcard"
@using AGC_Management.Controller
@using System.Text.Json
@using AGC_Management.Utils
@using SkiaSharp
@inject UserService UserService
@inject IHttpContextAccessor httpContextAccessor
@attribute [Authorize(Roles = "BotOwner, Administrator, HeadMod, Moderator, Supporter, Team, User")]

@if (loaded)
{
<div class="container mt-4">
    <h1>Rankcard Einstellungen</h1>
    <div class="row">
        <div class="col-md-6">
            <div class="mb-3">
                <label for="colorPicker" class="form-label">Farbe</label>
                <input type="color" class="form-control" id="colorPicker" @onchange="ColorChanged" value="@color"/>
            </div>

            <div class="mb-3">
                <label for="boxAlpha" class="form-label">Box Transparenz</label>
                <input type="range" class="form-range" id="boxAlpha" min="0" max="255" @onchange="BoxAlphaChanged" value="@boxalpha"/> @boxalpha / 255
            </div>

            <div class="mb-3">
                <label for="fontSelect" class="form-label">Schriftart</label>
                <select class="form-select" id="fontSelect" bind="@font" @onchange="FontChanged">
                    @foreach (var fontFamily in SKFontManager.Default.GetFontFamilies().ToList())
                    {
                        <option value="@fontFamily" selected="@(font == fontFamily)">@fontFamily</option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <label for="imageUpload" class="form-label">Hintergrundbild (Empfohlen: 930x280) (Max: 5MB)</label>
                <InputFile accept="image/*" class="form-control" id="imageUpload" OnChange="UploadFile"/>
                @if (!string.IsNullOrWhiteSpace(uploadStatus))
                {
                    <p class="text-success">@((MarkupString)uploadStatus)</p>
                }
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <p class="text-danger">@((MarkupString)errorMessage)</p>
                }
            </div>

            <button class="btn btn-primary" @onclick="async () => await SaveSettings()">Speichern und Anwenden</button>
            @if (hasCustomRankCardSettings)
            {
                <button class="btn btn-danger mt-2" @onclick="async () => await ResetCard()">Rangkarte zurücksetzen</button>
            }
        </div>
        <div class="col-md-6">
            <h2>Vorschau</h2>
            @if (!string.IsNullOrWhiteSpace(previewImageData) && hasPreviewData)
            {
                <img src="@previewImageData" alt="Rangkarte" class="img-fluid"/>
            }
            else
            {
                <h1>Vorschau wird generiert <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></h1>
            }
            <h2>Aktuelle Karte</h2>
            @if (!string.IsNullOrWhiteSpace(base64String))
            {
                <img src="@base64String" alt="Rangkarte" class="img-fluid"/>
            }
            else
            {
                <h1>Karte wird abgerufen <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span></h1>
            }
        </div>
    </div>
</div>
}
else
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}


@code {
    private bool loaded = false;
    
    private string imageToInstall = "";
    private string base64String = "";
    private bool hasCustomRankCardSettings;
    private string color = "#9f00ff";
    private string font = "Verdana";
    private int boxalpha = 150;
    private bool hasImageChanged;
    private bool hasColorChanged;
    private bool hasFontChanged;
    private bool hasBoxAlphaChanged;
    private string uploadStatus = "";
    private string errorMessage = "";

    // data for preview
    private bool hasPreviewData;
    private string previewImageData = "";
    private string previewImageToInstall = "";
    private int previewBoxAlpha = 150;
    private string previewColor = "#9f00ff";
    private string previewFont = "Verdana";


    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
        {
            uploadStatus = "Keine Datei ausgewählt.";
            return;
        }

        uploadStatus = "Datei wird hochgeladen... <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>";

        if (file.Size > 5242880)
        {
            errorMessage = "Die Datei ist zu groß. Bitte wähle eine Datei, die kleiner als 5MB ist.";
            uploadStatus = "";
            return;
        }

        if (file.ContentType != "image/png" && file.ContentType != "image/jpg" && file.ContentType != "image/jpeg" && file.ContentType != "image/webp")
        {
            errorMessage = "Die Datei hat ein ungültiges Format!";
            uploadStatus = "";
            return;
        }

        var old_data = imageToInstall;
        try
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream(5242880).CopyToAsync(ms);
            imageToInstall = Convert.ToBase64String(ms.ToArray());
            hasImageChanged = true;
            uploadStatus = "Bild erfolgreich hochgeladen.";
            errorMessage = "";
            await CopySettingsToPreview();
        }
        catch (Exception ex)
        {
            imageToInstall = old_data;
            errorMessage = $"Fehler beim Hochladen der Datei: {ex.Message}";
            uploadStatus = "";
        }
    }


    void FontChanged(ChangeEventArgs e)
    {
        font = e.Value.ToString();
        hasFontChanged = true;
        _ = CopySettingsToPreview();
    }

    void BoxAlphaChanged(ChangeEventArgs e)
    {
        boxalpha = int.Parse(e.Value.ToString());
        hasBoxAlphaChanged = true;
        _ = CopySettingsToPreview();
    }

    void ColorChanged(ChangeEventArgs e)
    {
        color = e.Value.ToString();
        hasColorChanged = true;
        _ = CopySettingsToPreview();
    }

    private async Task ResetCard()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = @"DELETE FROM userrankcardsettings WHERE userid = @userid";
        cmd.Parameters.AddWithValue("userid", (long)userId);
        await cmd.ExecuteNonQueryAsync();
        await OnInitializedAsync();
        await CopySettingsToPreview();
    }

    private async Task SaveSettings()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        if (!string.IsNullOrWhiteSpace(imageToInstall) && hasImageChanged)
        {
            bool isActivated = false;
            try
            {
                isActivated = bool.Parse(BotConfig.GetConfig()["LinkLens"]["Active"]);
            }
            catch (Exception)
            {
                // ignored
            }

            if (isActivated)
            {
                uploadStatus = "Bild wird moderativ geprüft... <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>";
                using var client = new HttpClient();
                var apikey = BotConfig.GetConfig()["LinkLens"]["API-KEY"];
                client.DefaultRequestHeaders.Add("api-key", apikey);
                client.DefaultRequestHeaders.Add("User-Agent",
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.1000.0 Safari/537.36");
                var content = new StringContent($"{{\"imageBase64\":\"{imageToInstall}\"}}", null, "application/json");
                var response = await client.PostAsync("https://api.linklens.xyz/analyze-levelcard", content);
                var responseString = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<RootObject>(responseString);
                if (result?.analysis.summary.reject_reason.Count > 0)
                {
                    var rejectReasons = "";
                    foreach (var reason in result.analysis.summary.reject_reason)
                    {
                        rejectReasons += reason.text;
                        if (reason != result.analysis.summary.reject_reason.Last())
                        {
                            rejectReasons += ", ";
                        }
                    }

                    errorMessage = $"Das Bild wurde abgelehnt, da es folgende Gründe hat: {rejectReasons}";
                    uploadStatus = "";
                    await LogRuleViolatingImageUpload(userId, rejectReasons, imageToInstall);
                    return;
                }

                uploadStatus = "Bild wurde moderativ geprüft und ist in Ordnung. Bild wird gespeichert...";

                await Task.Delay(500);
            }

            try
            {
                await SaveCustomRankCardSetting("imagedata", imageToInstall, userId);

                uploadStatus = "Bild wurde erfolgreich gespeichert.";
            }
            catch (Exception ex)
            {
                errorMessage = $"Fehler beim moderativen prüfen der Datei: {ex.Message}";
                uploadStatus = "";
            }
        }

        if (hasColorChanged)
        {
            await SaveCustomRankCardSetting("barcolor", color, userId);
        }

        if (hasFontChanged)
        {
            await SaveCustomRankCardSetting("textfont", font, userId);
        }

        if (hasBoxAlphaChanged)
        {
            await SaveCustomRankCardSetting("boxalpha", boxalpha, userId);
        }

        await OnInitializedAsync();
    }


    public class RejectReason
    {
        public string id { get; set; }
        public string text { get; set; }
    }

    public class Summary
    {
        public string action { get; set; }
        public double reject_prob { get; set; }
        public List<RejectReason> reject_reason { get; set; }
    }

    public class Analysis
    {
        public Summary summary { get; set; }
    }

    public class RootObject
    {
        public Analysis analysis { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await RetrieveCurrentSettings();
        await RenderPage();
        loaded = true;
    }

    private async Task RenderPage()
    {
        base64String = await RetrieveRankCardForCurrentUser();
        StateHasChanged();
        await CopySettingsToPreview();
    }


    private async Task LogRuleViolatingImageUpload(ulong userid, string reason, string imageData)
    {
        var userid_ = (long)userid;
        var unixnow = DateTimeOffset.Now.ToUnixTimeSeconds();
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = @"INSERT INTO userrankcardunallowedimagelog (userid, blockreason, imagedata, timestamp) VALUES (@userid, @reason, @imagedata, @timestamp)";
        cmd.Parameters.AddWithValue("userid", userid_);
        cmd.Parameters.AddWithValue("reason", reason);
        cmd.Parameters.AddWithValue("imagedata", imageData);
        cmd.Parameters.AddWithValue("timestamp", unixnow);
        await cmd.ExecuteNonQueryAsync();
    }

    private async Task RenderPreview()
    {
        if (hasPreviewData)
        {
            var context = httpContextAccessor.HttpContext;
            var currentuserid = UserService.GetUserId(context);
            var user = await CurrentApplication.DiscordClient.GetUserAsync(ulong.Parse(currentuserid.ToString()));
            var rank = await LevelUtils.GetRank(user.Id);
            var level = rank[user.Id].Level;
            var totalxp = rank[user.Id].Xp;
            var xpForCurrentLevel = LevelUtils.XpForLevel(level);
            var xpForNextLevel = LevelUtils.XpForLevel(level + 1);
            var xpForThisLevel = xpForNextLevel - xpForCurrentLevel;
            var xpForThisLevelUntilNow = totalxp - xpForCurrentLevel;
            var percentage = (int)(xpForThisLevelUntilNow / (float)xpForThisLevel * 100);
            var userRank = await LevelUtils.GetUserRankAsync(user.Id);
            SKData? imagedata = null;
            try
            {
                var id = await ImageUtils.GenerateRankCardForWebPreview(user, xpForThisLevelUntilNow, level, userRank, percentage,
                    totalxp,
                    xpForThisLevel, previewBoxAlpha, previewFont, previewImageToInstall, previewColor);
                imagedata = id;
            }
            catch (Exception e)
            {
                errorMessage = "Fehler beim generieren der Vorschau. Diese Datei ist kein Bild oder hat ein ungültiges Format.";
                uploadStatus = "";
                return;
            }

            var imgstream = imagedata.AsStream();
            byte[] bytes = new byte[imgstream.Length];
            imgstream.Read(bytes, 0, (int)imgstream.Length);
            previewImageData = "data:image/png;base64," + Convert.ToBase64String(bytes);
            StateHasChanged();
        }
    }

    private async Task CopySettingsToPreview()
    {
        hasPreviewData = false;
        previewBoxAlpha = boxalpha;
        previewColor = color;
        previewFont = font;
        previewImageToInstall = imageToInstall;
        hasPreviewData = true;
        await RenderPreview();
    }

    private async Task SaveCustomRankCardSetting(string settingName, string value, ulong userId)
    {
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = $@"
    INSERT INTO userrankcardsettings (userid, {settingName})
    VALUES (@userid, @value)
    ON CONFLICT (userid)
    DO UPDATE SET {settingName} = @value";
        cmd.Parameters.AddWithValue("value", value);
        cmd.Parameters.AddWithValue("userid", (long)userId);
        await cmd.ExecuteNonQueryAsync();
    }

    private async Task SaveCustomRankCardSetting(string settingName, int value, ulong userId)
    {
        var con = CurrentApplication.ServiceProvider.GetRequiredService<NpgsqlDataSource>();
        await using var cmd = con.CreateCommand();
        cmd.CommandText = $@"
    INSERT INTO userrankcardsettings (userid, {settingName})
    VALUES (@userid, @value)
    ON CONFLICT (userid)
    DO UPDATE SET {settingName} = @value";
        cmd.Parameters.AddWithValue("value", value);
        cmd.Parameters.AddWithValue("userid", (long)userId);
        await cmd.ExecuteNonQueryAsync();
    }

    private async Task<string> RetrieveRankCardForCurrentUser()
    {
        var context = httpContextAccessor.HttpContext;
        var currentuserid = UserService.GetUserId(context);
        var user = await CurrentApplication.DiscordClient.GetUserAsync(ulong.Parse(currentuserid.ToString()));
        var rank = await LevelUtils.GetRank(user.Id);
        var level = rank[user.Id].Level;
        var totalxp = rank[user.Id].Xp;
        var xpForCurrentLevel = LevelUtils.XpForLevel(level);
        var xpForNextLevel = LevelUtils.XpForLevel(level + 1);
        var xpForThisLevel = xpForNextLevel - xpForCurrentLevel;
        var xpForThisLevelUntilNow = totalxp - xpForCurrentLevel;
        var percentage = (int)(xpForThisLevelUntilNow / (float)xpForThisLevel * 100);
        var userRank = await LevelUtils.GetUserRankAsync(user.Id);
        var imagedata = await ImageUtils.GenerateRankCard(user, xpForThisLevelUntilNow, level, userRank, percentage,
            totalxp,
            xpForThisLevel);
        var imgstream = imagedata.AsStream();
        byte[] bytes = new byte[imgstream.Length];
        imgstream.Read(bytes, 0, (int)imgstream.Length);
        return "data:image/png;base64," + Convert.ToBase64String(bytes);
    }

    private async Task<string> RetrieveCurrentImageforCurrentUser()
    {
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var i = await ImageUtils.HasCustomRankCardSettings(userId);
        if (i)
        {
            var settings = await ImageUtils.GetCustomRankCardSettings(userId);
            // check if bg is null
            if (settings.Background != null)
            {
                return settings.Background;
            }

            return await ImageUtils.GetFallbackBackground();
            return settings.Background;
        }

        return await ImageUtils.GetFallbackBackground();
    }

    private async Task RetrieveCurrentSettings()
    {
        bool hs = await ImageUtils.HasCustomRankCardSettings(ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString()));
        hasCustomRankCardSettings = hs;
        var userId = ulong.Parse(UserService.GetUserId(httpContextAccessor.HttpContext).ToString());
        var settings = await ImageUtils.GetCustomRankCardSettings(userId);
        if (settings != null)
        {
            color = settings.HexColor ?? "#000000";
            font = settings.Font ?? "Verdana";
            base64String = settings.Background ?? await RetrieveCurrentImageforCurrentUser();
            boxalpha = settings.BoxOpacity ?? 100;
        }
    }

}