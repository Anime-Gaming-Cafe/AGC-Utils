@page "/Leaderboard"
@using AGC_Management.Entities.Web
@using AGC_Management.Utils
@attribute [Authorize(Roles = "BotOwner, Administrator, Moderator, Supporter, Team, User")]
@inject IHttpContextAccessor HttpContextAccessor

@if (LevelUtils.LeaderboardDataLoaded)
{
    <div class="leaderboard-container">
        <h3>Leaderboard</h3>
        <div class="leaderboard">
            @* Add a separate card for the current user at the top of the leaderboard *@
            @if (LevelUtils.cachedLeaderboardData.Any(item => item.UserId == ToolSet.GetUserIdFromHttpContext(HttpContextAccessor.HttpContext)))
            {
                var currentUser = LevelUtils.cachedLeaderboardData.First(item => item.UserId == ToolSet.GetUserIdFromHttpContext(HttpContextAccessor.HttpContext));
                <div class="leaderboard-item selfyou">
                    <div class="rank">
                        <span class="rank-number">@currentUser.Rank</span>
                    </div>
                    <div class="avatar">
                        <img src="@currentUser.Avatar" alt="@currentUser.Username"/>
                    </div>
                    <div class="username">@currentUser.Username (Du)</div>
                    <div class="level-container">
                        <div class="level">Level @currentUser.Level</div>
                    </div>
                    <div class="experience">@currentUser.Experience XP</div>
                </div>
            }

            @foreach (var item in currentPageData)
            {
                <div class="leaderboard-item @(IsCurrentUser(item.UserId) ? "you" : "")">
                    <div class="rank">
                        @if (item.Rank > 3)
                        {
                            <span class="rank-number">@item.Rank</span>
                        }
                        @if (item.Rank == 1)
                        {
                            <img src="https://files.fabi-chan.me/resources/leaderboardassets/goldmedal.png" alt="Gold Medal" style="width:40px; height:40px;"/>
                        }
                        else if (item.Rank == 2)
                        {
                            <img src="https://files.fabi-chan.me/resources/leaderboardassets/silvermedal.png" alt="Silver Medal" style="width:40px; height:40px;"/>
                        }
                        else if (item.Rank == 3)
                        {
                            <img src="https://files.fabi-chan.me/resources/leaderboardassets/bronzemedal.png" alt="Bronze Medal" style="width:40px; height:40px;"/>
                        }
                    </div>
                    <div class="avatar">
                        <img loading="lazy" src="@item.Avatar" alt="@item.Username"/>
                    </div>
                    <div class="username">@item.Username</div>
                    <div class="level-container">
                        <div class="level">Level @item.Level</div>
                    </div>
                    <div class="experience">@item.Experience XP</div>
                </div>
            }

        </div>
        <div class="pagination-lg">
            <div class="page-info">Seite @currentPage von @totalPages | Letztes Cacheupdate: @LevelUtils.CacheDate</div>
            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@IsFirstPage">Vorherige Seite</button>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@IsLastPage">Nächste Seite</button>
        </div>
    </div>
}
else
{
    <br>
    <em class="alert alert-danger">Das Leaderboard wird gerade geladen. Bitte warten...</em>
}

<br>

@code {

    private List<WebLeaderboardData> currentPageData = new();
    private const int ItemsPerPage = 25;
    private int currentPage = 1;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / ItemsPerPage);


    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }

    private async Task LoadPage(int page)
    {
        var start = (page - 1) * ItemsPerPage;
        totalItems = LevelUtils.cachedLeaderboardData.Count;
        var count = Math.Min(ItemsPerPage, LevelUtils.cachedLeaderboardData.Count - start);
        currentPageData = LevelUtils.cachedLeaderboardData.GetRange(start, count);
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            await LoadPage(currentPage);
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            await LoadPage(currentPage);
        }
    }

    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage * ItemsPerPage >= totalItems;

    private bool IsCurrentUser(ulong userId)
    {
        return userId == ToolSet.GetUserIdFromHttpContext(HttpContextAccessor.HttpContext);
    }


}